#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Project Euler Problem 11
#
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# This is simply a brute force method and should theoretically solve the Problem
# given an infinite amount of time (and computing resources). As usual, this
# brute force option is not the one we desire in solving this problem.

triangularNum = 0
i = 0
divisors = []

while(len(divisors) < 500):
    print len(divisors)
    divisors = []
    i += 1
    triangularNum += i
    divisor = triangularNum
    divisor -= i
    while(divisor > 0):
        if(triangularNum % divisor == 0):
            divisors.append(divisor)
        divisor -= 1

print triangularNum
